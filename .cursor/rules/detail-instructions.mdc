---
description:
globs:
alwaysApply: false
---


## 家族車共有アプリ - 設計ドキュメント

### プロジェクト概要

このドキュメントは、\*\*「家族車共有アプリ」\*\*の開発におけるアーキテクチャ、フォルダ構成、設計原則、および実装の詳細を定めたものです。本ドキュメントは、プロジェクトの効率的な開発、高い保守性、そして品質の維持を目的としています。

### 1\. プロジェクトの全体構成

プロジェクトは、クリーンアーキテクチャの原則に基づき、機能と責務ごとに明確に分離された階層的な構造を採用しています。

```
family-car-scheduler/
├── .github/                 # GitHub Actions, Issue/PRテンプレートなど
├── .husky/                  # Git hooks (pre-commit, pre-push)
├── .vscode/                 # VS Codeの設定ファイル
├── docs/                    # プロジェクト関連ドキュメント
├── legal/                   # プライバシーポリシー、利用規約などの法的文書
├── scripts/                 # ビルド・デプロイ用のスクリプト
├── src/                     # アプリケーションのソースコード
├── .env.* # 環境変数ファイル
└── ... その他の設定ファイル
```

#### src/ フォルダ詳細

アプリケーションの主要なソースコードは `src/` フォルダに格納されています。

```
src/
├── app/                     # Expo Routerによるページ構成
├── assets/                  # 画像、フォント、アニメーションなどの静的リソース
├── components/              # 再利用可能なUIコンポーネント
├── constants/               # 定数定義（テーマ、設定、静的データなど）
├── hooks/                   # カスタムフック
├── services/                # API通信やデータアクセス層
├── store/                   # 状態管理（Zustandを使用）
├── types/                   # TypeScriptの型定義
└── utils/                   # 汎用的なユーティリティ関数
```

-----

### 2\. 詳細フォルダ構成と責務

#### **src/app/ - ページ構成 (Expo Router)**

  - `(auth)/`: 認証フロー（ログイン、新規登録、パスワードリセットなど）に関連するページをグループ化します。
  - `(tabs)/`: アプリのメイン機能（カレンダー、予約一覧、プロフィール）を格納するタブナビゲーションです。
  - `modal/`: ページとしてモーダル表示されるコンポーネントを配置します。
  - `_layout.tsx`: アプリのルートレイアウト。認証状態に応じたナビゲーションの切り替えを管理します。

#### **src/components/ - コンポーネント構成**

  - `ui/`: アプリケーション全体で再利用される、スタイリングされた基本的なUI要素（ボタン、入力欄、モーダルなど）を配置します。
  - `calendar/`, `reservation/`, `help/`: 特定の機能に特化したコンポーネントを配置します。

#### **src/hooks/ - カスタムフック**

  - `auth/`, `firebase/`, `reservation/`: 特定の機能に関連するロジック（データの取得、状態管理、API通信など）をカプセル化し、再利用性を高めます。

#### **src/services/ - データアクセス層**

  - `firebase/`: Firebase関連のサービス（Auth、Firestore、Functionsなど）を抽象化します。
  - `api/`: REST APIやCloud Functionsを呼び出すための関数を定義します。

#### **src/store/ - 状態管理**

  - `slices/`: アプリケーションの各ドメイン（認証、ユーザー、予約など）の状態を管理するZustandストアのスライスを定義します。

-----

### 3\. 設計原則と開発規約

#### **1. ファイル命名規則**

  - **コンポーネント**: `PascalCase` (例: `ReservationCard.tsx`)
  - **フック**: `camelCase` + `use`接頭辞 (例: `useReservations.ts`)
  - **ユーティリティ**: `camelCase` (例: `formatDate.ts`)

#### **2. インポート順序**

以下の順序でインポートを整理します。これは\*\*`eslint-plugin-import`\*\*によって自動的に適用されます。

1.  **React・React Native**
2.  **外部ライブラリ**
3.  **内部インポート**（絶対パス）
4.  **型インポート**

#### **3. コンポーネント構成パターン**

各コンポーネントは、以下のファイルで構成されることを基本とします。

  - `ComponentName.tsx`: メインコンポーネントの定義。
  - `ComponentName.styles.ts`: スタイル定義。
  - `index.ts`: コンポーネントのエクスポート。

#### **4. 絶対パス設定**

`tsconfig.json`でパスエイリアスを設定し、コードの可読性と保守性を高めます。

```json
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"],
      "@/components/*": ["./src/components/*"],
      "@/hooks/*": ["./src/hooks/*"],
      // ... その他のパスエイリアス
    }
  }
}
```

-----

### 4\. 拡張機能の実装設計

#### **1. 拡張認証機能**

  - **パスワードリセット**: Firebase Authの`sendPasswordResetEmail`を使用し、ユーザーを安全なWebページに誘導するフローを実装します。
  - **メールアドレス復旧**: 電話番号とセキュリティ質問による本人確認を行い、Cloud Functions経由でメールアドレスをSMSで通知します。
  - **アカウント削除**: ユーザーのデータを論理削除し、個人情報をマスクします。Firebase Authからもユーザーを削除します。
  - **複数ファミリー管理**: ユーザーとファミリーの関連をFirestoreの`UserFamily`コレクションで管理し、複数の家族グループへの参加・切り替えを可能にします。

#### **2. ヘルプ・サポート機能**

  - **お問い合わせ**: Firestoreにメッセージを保存し、Cloud Functionsで管理者に自動通知します。添付ファイルもFirebase Storageで管理します。
  - **FAQ**: 静的データとして管理し、カテゴリ別フィルタリングや検索機能を実装します。
  - **アプリ情報**: ExpoのAPIを使用して、バージョン、デバイス情報、リリースチャンネルなどを取得し、表示します。

-----

### 5\. 開発環境・CI/CD設定

#### **1. パッケージ依存関係**

  - **開発ツール**: `eslint`, `prettier`, `jest`, `husky`などを使用し、開発効率とコード品質を向上させます。

#### **2. 自動化ツール設定**

  - **ESLint**: コードの静的解析と品質チェックを自動で行います。
  - **Prettier**: コードフォーマットを統一し、スタイルのばらつきを防ぎます。
  - **Husky**: `pre-commit`や`pre-push`フックを設定し、コミットやプッシュ前に自動でテストやリントを実行します。
  - **GitHub Actions**:
      - `ci.yml`: Pull Requestごとに自動でコード品質チェック（lint, test, build）を実行します。
      - `cd.yml`: `main`ブランチへのマージやタグ付けをトリガーに、自動でデプロイを行います。

これらの設計と規約に従うことで、一貫性があり、スケーラブルで、共同開発に適したアプリケーションを構築します。